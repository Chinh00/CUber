// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TripService.Infrastructure.Data;

#nullable disable

namespace TripService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TripContext))]
    [Migration("20241222082512_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TripService.AppCore.Domain.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid?>("CustomerInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_info_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("numeric")
                        .HasColumnName("tip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("CustomerInfoId")
                        .HasDatabaseName("ix_bookings_customer_info_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("TripService.AppCore.Domain.CustomerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_customer_infos");

                    b.ToTable("customer_infos", (string)null);
                });

            modelBuilder.Entity("TripService.AppCore.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Lat")
                        .HasColumnType("numeric")
                        .HasColumnName("lat");

                    b.Property<decimal>("Lng")
                        .HasColumnType("numeric")
                        .HasColumnName("lng");

                    b.Property<string>("LocationName")
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_locations_booking_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("TripService.AppCore.Domain.Booking", b =>
                {
                    b.HasOne("TripService.AppCore.Domain.CustomerInfo", "CustomerInfo")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerInfoId")
                        .HasConstraintName("fk_bookings_customer_infos_customer_info_id");

                    b.Navigation("CustomerInfo");
                });

            modelBuilder.Entity("TripService.AppCore.Domain.Location", b =>
                {
                    b.HasOne("TripService.AppCore.Domain.Booking", "Booking")
                        .WithMany("Locations")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_bookings_booking_id");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TripService.AppCore.Domain.Booking", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("TripService.AppCore.Domain.CustomerInfo", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
